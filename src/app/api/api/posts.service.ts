/**
 * Sports fever
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: Shankarmurthy.bhat@in.bosch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Comment } from '../model/comment';
import { Post } from '../model/post';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PostsService {

    protected basePath = 'http://bmh1054484.ban.apac.bosch.com:8000/spfever';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds a comment to a post
     * Creates a new post by a user
     * @param postId Unique Id of Post
     * @param comment The post the user wants to create
     * @param authtoken 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addComment(postId: string, comment: Comment, authtoken: string, observe?: 'body', reportProgress?: boolean): Observable<Comment>;
    public addComment(postId: string, comment: Comment, authtoken: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Comment>>;
    public addComment(postId: string, comment: Comment, authtoken: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Comment>>;
    public addComment(postId: string, comment: Comment, authtoken: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (postId === null || postId === undefined) {
            throw new Error('Required parameter postId was null or undefined when calling addComment.');
        }
        if (comment === null || comment === undefined) {
            throw new Error('Required parameter comment was null or undefined when calling addComment.');
        }
        if (authtoken === null || authtoken === undefined) {
            throw new Error('Required parameter authtoken was null or undefined when calling addComment.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (authtoken !== undefined) {
            queryParameters = queryParameters.set('authtoken', <any>authtoken);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Comment>(`${this.basePath}/posts/${encodeURIComponent(String(postId))}/comments`,
            comment,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new posts
     * Creates a new post by a user
     * @param post The post the user wants to create
     * @param authtoken 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createNewPost(post: Post, authtoken: string, observe?: 'body', reportProgress?: boolean): Observable<Post>;
    public createNewPost(post: Post, authtoken: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Post>>;
    public createNewPost(post: Post, authtoken: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Post>>;
    public createNewPost(post: Post, authtoken: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (post === null || post === undefined) {
            throw new Error('Required parameter post was null or undefined when calling createNewPost.');
        }
        if (authtoken === null || authtoken === undefined) {
            throw new Error('Required parameter authtoken was null or undefined when calling createNewPost.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (authtoken !== undefined) {
            queryParameters = queryParameters.set('authtoken', <any>authtoken);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Post>(`${this.basePath}/posts`,
            post,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the comments for a post
     * Creates a new post by a user
     * @param postId Unique Id of Post
     * @param filterByUserId To filter the posts by userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getComments(postId: string, filterByUserId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Comment>>;
    public getComments(postId: string, filterByUserId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Comment>>>;
    public getComments(postId: string, filterByUserId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Comment>>>;
    public getComments(postId: string, filterByUserId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (postId === null || postId === undefined) {
            throw new Error('Required parameter postId was null or undefined when calling getComments.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filterByUserId !== undefined) {
            queryParameters = queryParameters.set('filterByUserId', <any>filterByUserId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Comment>>(`${this.basePath}/posts/${encodeURIComponent(String(postId))}/comments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all the posts
     * Gets all the posts or filtered by user
     * @param postId To filter the posts by userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPost(postId: string, observe?: 'body', reportProgress?: boolean): Observable<Post>;
    public getPost(postId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Post>>;
    public getPost(postId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Post>>;
    public getPost(postId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (postId === null || postId === undefined) {
            throw new Error('Required parameter postId was null or undefined when calling getPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Post>(`${this.basePath}/posts/${encodeURIComponent(String(postId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all the posts
     * Gets all the posts or filtered by user
     * @param filterByUserId To filter the posts by userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPosts(filterByUserId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Post>>;
    public getPosts(filterByUserId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Post>>>;
    public getPosts(filterByUserId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Post>>>;
    public getPosts(filterByUserId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filterByUserId !== undefined) {
            queryParameters = queryParameters.set('filterByUserId', <any>filterByUserId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Post>>(`${this.basePath}/posts`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
