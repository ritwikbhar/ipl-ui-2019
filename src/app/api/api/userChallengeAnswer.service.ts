/**
 * Sports fever
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: Shankarmurthy.bhat@in.bosch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { UserChallengeAnswer } from '../model/userChallengeAnswer';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class UserChallengeAnswerService {

    protected basePath = 'http://localhost:8000/spfever';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Creates a new userChallengeAnswer.
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createUserChallengeAnswer(body?: UserChallengeAnswer, observe?: 'body', reportProgress?: boolean): Observable<UserChallengeAnswer>;
    public createUserChallengeAnswer(body?: UserChallengeAnswer, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserChallengeAnswer>>;
    public createUserChallengeAnswer(body?: UserChallengeAnswer, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserChallengeAnswer>>;
    public createUserChallengeAnswer(body?: UserChallengeAnswer, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<UserChallengeAnswer>(`${this.basePath}/userChallengeAnswers`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a userChallengeAnswer based on the project id.
     * Deletes a userChallengeAnswer based on the userChallengeAnswer id from file system.
     * @param id A userChallengeAnswerâ€™s unique id to delete a userChallengeAnswer
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUserChallengeAnswer(id: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public deleteUserChallengeAnswer(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public deleteUserChallengeAnswer(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public deleteUserChallengeAnswer(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteUserChallengeAnswer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<boolean>(`${this.basePath}/userChallengeAnswers/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finds answers by challenge id
     * 
     * @param challengeId challengeId values that need to be considered for filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public filterByChallengeId(challengeId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<UserChallengeAnswer>>;
    public filterByChallengeId(challengeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserChallengeAnswer>>>;
    public filterByChallengeId(challengeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserChallengeAnswer>>>;
    public filterByChallengeId(challengeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (challengeId === null || challengeId === undefined) {
            throw new Error('Required parameter challengeId was null or undefined when calling filterByChallengeId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (challengeId !== undefined) {
            queryParameters = queryParameters.set('challengeId', <any>challengeId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<UserChallengeAnswer>>(`${this.basePath}/userChallengeAnswers/filterByChallengeId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finds UserChallengeAnswer by user id
     * 
     * @param userId userId to filter by
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public filterByUserId(userId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<UserChallengeAnswer>>;
    public filterByUserId(userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserChallengeAnswer>>>;
    public filterByUserId(userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserChallengeAnswer>>>;
    public filterByUserId(userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling filterByUserId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userId !== undefined) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<UserChallengeAnswer>>(`${this.basePath}/userChallengeAnswers/filterByUserId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a userChallengeAnswer on ID.
     * 
     * @param id A userChallengeAnswerâ€™s unique id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserChallengeAnswer(id: string, observe?: 'body', reportProgress?: boolean): Observable<UserChallengeAnswer>;
    public getUserChallengeAnswer(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserChallengeAnswer>>;
    public getUserChallengeAnswer(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserChallengeAnswer>>;
    public getUserChallengeAnswer(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getUserChallengeAnswer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<UserChallengeAnswer>(`${this.basePath}/userChallengeAnswers/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all UserChallengeAnswers
     * Retrieves all UserChallengeAnswers
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserChallengeAnswers(observe?: 'body', reportProgress?: boolean): Observable<Array<UserChallengeAnswer>>;
    public getUserChallengeAnswers(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserChallengeAnswer>>>;
    public getUserChallengeAnswers(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserChallengeAnswer>>>;
    public getUserChallengeAnswers(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<UserChallengeAnswer>>(`${this.basePath}/userChallengeAnswers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the details of a userChallengeAnswer.
     * Updates the details of a userChallengeAnswer. 
     * @param id A userChallengeAnswerâ€™s unique id to update a userChallengeAnswer
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUserChallengeAnswer(id: string, body?: UserChallengeAnswer, observe?: 'body', reportProgress?: boolean): Observable<UserChallengeAnswer>;
    public updateUserChallengeAnswer(id: string, body?: UserChallengeAnswer, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserChallengeAnswer>>;
    public updateUserChallengeAnswer(id: string, body?: UserChallengeAnswer, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserChallengeAnswer>>;
    public updateUserChallengeAnswer(id: string, body?: UserChallengeAnswer, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateUserChallengeAnswer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<UserChallengeAnswer>(`${this.basePath}/userChallengeAnswers/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
